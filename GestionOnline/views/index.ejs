<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <script src="/socket.io/socket.io.js"></script>


    <title>Crud</title>
</head>

<style>
    #messageContainer {
        margin-top: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        height: 300px;
        overflow-y: scroll;

    }
</style>


<script>
    document.addEventListener('DOMContentLoaded', () => {
    const socket = io();

    socket.on('connect', () => {
        console.log('Conectado al servidor');
    });

    socket.on('message', (msg) => {
        console.log('Mensaje del servidor:', msg);
    });

    socket.on('inventoryUpdate', () => {
        console.log('Actualización de inventario recibida');
                                                            // Lógica para actualizar la lista de productos
        fetch('/inventario')
        .then(response => response.text())
        .then(html => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const newTableBody = doc.querySelector('tbody').innerHTML;
            document.querySelector('tbody').innerHTML = newTableBody;
        })
        .catch(error => console.error('Error al obtener el inventario actualizado:', error));
    });

    socket.on('disconnect', () => {
        console.log('Desconectado del servidor');
    });
    });



</script>





<body>



    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container-fluid">
        <a class="navbar-brand" href="#">TIENDA DE PRODUCTOS ONLINE</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        
            </ul>
            <form class="d-flex">
            <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
            <button class="btn btn-outline-success" type="submit">Search</button>
            </form>
        </div>
        </div>
    </nav>
    




    <div class="container">
        <a href="/create" class="btn btn-outline-primary mt-4"><i class='bx bxs-plus-circle bx-md'></i></a>
        <a href="/cliente" class="btn btn-outline-primary mt-4"><i class='bx bxs-plus-circle bx-md'></i></a>
        <table class="table table-bordered table-striped text-center mt-4">
            <thead>
                <tr class="bg-primary text-white"> 
                    <th scope="col">ID</th>
                    <th scope="col">NOMBRE</th>
                    <th scope="col">DESCRIPCION</th>
                    <th scope="col">PRECIO</th>
                    <TH scope="col">STOCK</TH>
                    
                    <th scope="col">ACCIONES</th>

                </tr>
            </thead>


            <tbody>
                <% results.forEach((producto)=> { %>             <!--Sirve para recorrer las tablas -->

                <tr>
                    <td><%= producto.id %></td>
                    <td><%= producto.nombre %></td>
                    <td><%= producto.descripcion %></td>
                    <td><%= producto.precio %></td>
                    <td><%= producto.stock %></td>
                <td>
                    <a href="/edit/<%= producto.id %>" class="btn btn-outline-info">editar</a>
                    <a href="/delete/<%= producto.id %>" class="btn btn-outline-danger"   onclick="return confirm('seguro de que deseas borrar este producto?')">borrar</a>
    
                </td>
                
                </tr>
            <%  }) %>
            </tbody>


        </table>



    </div>
    




    <div class="container mt-5">
        <h3>Atencion al Cliente</h3>

        <div id="messageContainer" class="border p-3 mb-3" style="height: 300px; overflow-y: auto;"></div>

        <div class="input-group mb-3">
            <input type="text" id="messageInput" class="form-control" placeholder="Escribe tu mensaje" aria-label="Escribe tu mensaje" aria-describedby="button-addon2">
            <button class="btn btn-primary" type="button"  id="button-addon2">Enviar</button>
        </div>
    </div>


    

    

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script> 

    
    
    
    <script>

    //Preparar la cookie 
                                                         // Comprobación de cookie al cargar la página
    window.onload = function() {
            checkCookie();
        };

                                                         // Función para comprobar si existe la cookie
        function checkCookie() {
            if (document.cookie.indexOf("miCookie") >= 0) {
                alert("¡BIENVENIDO A INVENTARIO!");
            }
        }

        
        document.cookie = "miCookie=valorCookie; expires=Thu, 01 Jan 2026 00:00:00 UTC; path=/";   //cookie lista para usar 


//    window.onload = initializeWebSocket;
    checkCookie();
    



    function initializeSocketIO() {
    const socket = io();

    const messageContainer = document.getElementById('messageContainer');



    socket.on('connect', () => {
        console.log('Conexión establecida.');
        appendMessage('Conexión establecida.');
    });

    socket.on('message', (data) => {
        console.log('Mensaje recibido del servidor:', data);
        appendMessage('Servidor: ' + data);
    });

    socket.on('disconnect', () => {
        console.log('Conexión cerrada.');
        appendMessage('Conexión cerrada.');
    });

    socket.on('error', (error) => {
        console.error('Error de Socket.IO:', error);
        appendMessage('Error de Socket.IO: ' + error.message);
    });

    function sendMessage() {
        const messageInput = document.getElementById('messageInput');
        const message = messageInput.value;
        socket.emit('clientMessage', message);
        messageInput.value = '';
        appendMessage('Cliente: ' + message);
    }

    function appendMessage(message) {
        const messageElement = document.createElement('div');
        messageElement.innerText = message;
        messageContainer.appendChild(messageElement);
    }
}

                                       // Llamar a la función para inicializar Socket.IO cuando la página se cargue
window.onload = initializeSocketIO;






    </script>

</body>
</html>






